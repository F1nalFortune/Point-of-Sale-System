import java.io.*;
import java.util.*;

public class PointOfSale {
  
  //Polymorphism design pattern applied
  
  //attributes
  private double totalPrice;
  private static float discount = 0.90f;
  public boolean unixOS = true; 
  private double tax = 1.06;
  
  public static String rentalDatabaseFile = "../Database/rentalDatabase.txt"; 
  public static String couponNumber = "../Database/couponNumber.txt";
  public static String itemDatabaseFile = "../Database/itemDatabase.txt"; //determines the name of the databaseFile for sale
  public static String tempFile="../Database/temp.txt";
  Inventory inventory = Inventory.getInstance();
  
  private List<Item> databaseItem = new ArrayList<Item>(); //creates a list of all items in the database
  private List<Item> transactionItem = new ArrayList<Item>(); //this list will store all items to be used in this sale
  
  //constructor
  public PointOfSale(){
    //detects windows OS, changes databaseFile string to use "\" protocol
    if (System.getProperty("os.name").startsWith("W")||System.getProperty("os.name").startsWith("w")){
      unixOS = false; 
      couponNumber= "..\\Database\\couponNumber.txt"; 
      rentalDatabaseFile = "..\\Database\\rentalDatabase.txt"; 
      itemDatabaseFile = "..\\Database\\itemDatabase.txt";
      tempFile="..\\Database\\temp.txt";
    }
  }
  
  
  public void startNew(String databaseFile) 
  {
    try{
      
      //totalPrice = 0;
      int itemID; int amount;
      if (inventory.accessInventory(databaseFile, databaseItem) == true) //if can access inventory
      {
        Scanner cashierInput = new Scanner(System.in); //determines if there is more items to be added
        do //must register at least one item
        {
          FileWriter fw = new FileWriter(tempFile,true);
          BufferedWriter bw = new BufferedWriter(fw);
          //Cashier enters itemID and amount
          System.out.println("Enter itemID");
          itemID=checkInt();
          
          System.out.println("Enter amount");
          amount =checkInt();
          
          //Calls the enterItem method
          if (enterItem(itemID,amount) == false)
            System.out.println("Item not found. Press 'e' to try again");
          else{//add items and amount into temp
            bw.write(itemID +" "+ amount);
            bw.write(System.getProperty( "line.separator" ));
            bw.close();
            System.out.println("Press 'e' to insert another item. Press 'f' to close cart.");
          }
        } while (cashierInput.next().equals("e")); //press e to add more items
        System.out.println("Do you want to remove any item? y-yes");
        if (cashierInput.next().equals("y")){
          do{
            System.out.println("Enter the item number you would like to remove");
            int remove=checkInt();
             removeItems(remove);
          }while(cashierInput.next().equals("e"));
        }
        //ask for coupon
        coupon();
        
        //cancel sale
        System.out.println("Do you want to keep the sale?");
        if (cashierInput.next().equals("no")){
          cancelSales();}
      }
      
      else
      {
        System.out.println("Can't access database.");  }
    }
    
    catch (IOException e)
    {
      System.err.println("Error: " + e.getMessage());
    }
    
  }
  
  private void coupon(){
    Scanner cashierInput = new Scanner(System.in);
    
    String coupon="";
    String couponNo="";
    System.out.println("Do you have a coupon? y-Yes");
    coupon=cashierInput.next();
    if(coupon.equals("y")){
      System.out.println("Enter coupon number");
      couponNo=cashierInput.next();
      
      
      boolean ableToOpen = true;
      String line = null;
      int numLine = 0;
      String[] coupons=new String[1000];
      try {
        FileReader fileR = new FileReader(couponNumber);
        BufferedReader textReader = new BufferedReader(fileR);
        //reads the entire database
        while ((line = textReader.readLine()) != null)
        {
          coupons[numLine]=line;
          numLine++;
        }        
        
        textReader.close();
      }
      
      //catches exceptions
      catch(FileNotFoundException ex) {
        System.out.println(
                           "Unable to open file 'couponNumber'"); 
        ableToOpen = false;
      }
      catch(IOException ex) {
        System.out.println(
                           "Error reading file 'couponNumber'");  
        ableToOpen = false;
      }
      
      //check for coupon
      
      boolean valid=false;
      for(int i=0;i<coupons.length;i++){
        if(couponNo.equals(coupons[i])){
          valid=true; 
        }
      }
      while(valid==false){
        System.out.println("Invalid coupon. Please try again."); 
        couponNo=cashierInput.next();
        for(int i=0;i<coupons.length;i++){
          if(couponNo.equals(coupons[i])){
            valid=true; 
          }
        }
      }
      if(valid){
        totalPrice=totalPrice*discount;
        System.out.format("Total: %.2f\n", totalPrice);
      }
    }
  }
  
  private void cancelSales(){
    databaseItem.clear();
    transactionItem.clear();
    System.out.println("your transaction has bee complete");
    try{
      File file = new File(tempFile);
      file.delete();
    }catch(Exception e){
      e.printStackTrace();
    }
    //System.exit(1);
  }
  private boolean enterItem(int itemID, int amount) //might include in a "mother class" in the future
  {
    boolean foundItem = false;
    
    for (int counter = 0; counter < databaseItem.size() && foundItem == false; counter++)
    {
      if (databaseItem.get(counter).getItemID() == itemID) //checks if item is found on the database
      {
        transactionItem.add(new Item(itemID,databaseItem.get(counter).getItemName(),databaseItem.get(counter).getPrice(),amount));
        foundItem = true;
      }
    }
    
    if (foundItem == true)
      //updateTotal();
    return foundItem;
  }
  
  private void updateTotal() 
  {
    
    //updates total value to be displayed on the screen
    totalPrice += transactionItem.get(transactionItem.size() - 1).getPrice()
      *transactionItem.get(transactionItem.size() - 1).getAmount();
    
    //shows running total on screen and item info
    for (int counter = 0; counter < transactionItem.size(); counter++)
      //prints item name - price
      System.out.format("%d %s x %d  --- $ %.2f\n", transactionItem.get(counter).getItemID(),transactionItem.get(counter).getItemName(),
                        transactionItem.get(counter).getAmount(), 
                        transactionItem.get(counter).getPrice()*transactionItem.get(counter).getAmount());
    
    //prints running total
    System.out.format("Total: %.2f\n", totalPrice);
    
  }
  
  public double endPOS(String databaseFile, Boolean takeFromInventory, List <ReturnItem> returnList)
  {
    
    if (takeFromInventory) {
      totalPrice = totalPrice*tax; //calculates price with tax
      //prints total with taxes
      System.out.format("Total with taxes: %.2f\n", totalPrice);
      inventory.updateInventory(databaseFile, transactionItem, databaseItem,takeFromInventory);
    }
    else
    {
      if (returnList == null) 
      {
        System.out.format("Total: %.2f\n",totalPrice);
      }
      else
      {
        totalPrice = 0;
        double itemPrice = 0;
        //Calculates the price  
        for (int transactionCounter = 0; transactionCounter < transactionItem.size(); transactionCounter++)
          for (int returnCounter = 0; returnCounter < returnList.size(); returnCounter++)
        {
          if (transactionItem.get(transactionCounter).getItemID() == returnList.get(returnCounter).getItemID())
          {
            //Applies a value to be payed depending on the amount of days it is late. If it is not late, no value is applied
            itemPrice = transactionItem.get(transactionCounter).getPrice()* 0.1 * returnList.get(returnCounter).getDays();
            totalPrice += itemPrice;
            System.out.println("Item Name: " + transactionItem.get(transactionCounter).getItemName() + "Days Late: " 
                                 + returnList.get(returnCounter).getDays() + "To be paid: " + itemPrice);
            System.out.println("Total: " + totalPrice);
          }
        }
      }
      inventory.updateInventory(databaseFile, transactionItem, databaseItem,takeFromInventory);
    }
    cancelSales();
    return totalPrice;
  }
  
  //Checks if the value inserted is an integer
  private static int checkInt(){
    
    Scanner scan=new Scanner(System.in);
    while(!scan.hasNextInt()){
      System.out.println("The input is not valid. Please try again."); 
      scan.next();
    }
    
    return Integer.parseInt(scan.nextLine());
  }
  
    private void removeItems(int ID){
    boolean ableToOpen=true;
    try{
      
      //File inputFile = new File("myFile.txt");
      String temp = "../Database/newTemp.txt";
  if(System.getProperty("os.name").startsWith("W")||System.getProperty("os.name").startsWith("w")){
   temp = "..\\Database\\newTemp.txt"; 
  }
      File tempF = new File(temp);
      FileReader fileR = new FileReader(tempFile);
      BufferedReader reader = new BufferedReader(fileR);
      BufferedWriter writer = new BufferedWriter(new FileWriter(tempF));
      String type= reader.readLine();
      String phone;
      if(type.equals("Sale")){
        writer.write(type);
        writer.write(System.getProperty("line.separator"));
        for (int i =0; i<transactionItem.size();i++){
          if (transactionItem.get(i).getItemID()!=ID){
            writer.write(transactionItem.get(i).getItemID() +" "+ transactionItem.get(i).getAmount());
            writer.write(System.getProperty( "line.separator" ));
          }
        }
      }
      else if(type.equals("Rental")){
        phone=reader.readLine();
        writer.write(type);
        writer.write(System.getProperty("line.separator"));
        writer.write(phone);
        writer.write(System.getProperty("line.separator"));
        for (int i =0; i<transactionItem.size();i++){
          if (transactionItem.get(i).getItemID()!=ID){
            writer.write(transactionItem.get(i).getItemID() +" "+ transactionItem.get(i).getAmount());
            writer.write(System.getProperty( "line.separator" ));
          }
        }
      }
      fileR.close();
      writer.close(); 
      reader.close(); 
      File file = new File(tempFile);
      file.delete();
      boolean successful = tempF.renameTo(new File(tempFile));
      boolean inTheList=false;
            int index=-1;
            for (int i=0; i<transactionItem.size();i++){
              if (ID==transactionItem.get(i).getItemID()){
                index=i;
                inTheList=true;
                
              }
            }
            if (inTheList==true&&index>=0){
              
             
              transactionItem.remove(transactionItem.get(index));
              System.out.println("Press 'e' to remove another item. Press 'f' to close cart.");
            }
            else
              System.out.println("The item is not in your cart.Press 'e' to try again");
      System.out.println("success");
    }
    catch(FileNotFoundException ex) {
      System.out.println(
                         "Unable to open file 'temp'"); 
      ableToOpen = false;
    }
    catch(IOException ex) {
      System.out.println(
                         "Error reading file 'temp'");  
      ableToOpen = false;
    }
  }
  public void continueTrans(String databaseFile)
  {
    boolean ableToOpen=true;
    try{
      FileReader fileR = new FileReader(tempFile);
      BufferedReader textReader = new BufferedReader(fileR);
      String line=null;
      int numLine=0;
      List<Integer> itemNo=new ArrayList<Integer>();
      List<Integer> itemAmount=new ArrayList<Integer>();
      String[] lineSort;
      line=textReader.readLine();
            if(line.equals("Sale")){
                inventory.accessInventory(itemDatabaseFile, databaseItem);
            }
            else if(line.equals("Rental")){
                inventory.accessInventory(rentalDatabaseFile, databaseItem);
                line=textReader.readLine();
                System.out.println("Phone number:");
                System.out.println(line);
            }
            while ((line = textReader.readLine()) != null)
            {
                lineSort = line.split(" ");
                int i = Integer.parseInt(lineSort[0]);
                int j = Integer.parseInt(lineSort[1]);
                itemNo.add(i);
                itemAmount.add(j);
                numLine++;
            }
            for(int k=0;k<numLine;k++){
                //enterItem(itemNo.get(k),itemAmount.get(k));
                if (enterItem(itemNo.get(k),itemAmount.get(k)) == false)
                    System.out.println("Item not found.");
            }

    }
    catch(FileNotFoundException ex) {
      System.out.println(
                         "Unable to open file 'temp'"); 
      ableToOpen = false;
    }
    catch(IOException ex) {
      System.out.println(
                         "Error reading file 'temp'");  
      ableToOpen = false;
    }
    try{
   int itemID; int amount;
      if (inventory.accessInventory(databaseFile, databaseItem) == true) //if can access inventory
      {
        Scanner cashierInput = new Scanner(System.in);
        System.out.println("Press 'e' to insert another item. Press 'f' to close cart.");//determines if there is more items to be added
        while (cashierInput.next().equals("e")) 
        {
          FileWriter fw = new FileWriter(tempFile,true);
          BufferedWriter bw = new BufferedWriter(fw);
          //Cashier enters itemID and amount
          System.out.println("Enter itemID");
          itemID=checkInt();
          
          System.out.println("Enter amount");
          amount =checkInt();
          
          //Calls the enterItem method
          if (enterItem(itemID,amount) == false)
            System.out.println("Item not found. Press 'e' to try again");
          else{//add items and amount into temp
            bw.write(itemID +" "+ amount);
            bw.write(System.getProperty( "line.separator" ));
            bw.close();
            System.out.println("Press 'e' to insert another item. Press 'f' to close cart.");
          }
        } //press e to add more items
        System.out.println("Do you want to remove any item? y-yes");
        if (cashierInput.next().equals("y")){
          do{
            System.out.println("Enter the item number you would like to remove");
            int remove=checkInt();
             removeItems(remove);
          }while(cashierInput.next().equals("e"));
        }
        //ask for coupon
        coupon();
        
        //cancel sale
        System.out.println("Do you want to keep the sale?");
        if (cashierInput.next().equals("no")){
          cancelSales();}
      }
    else
      {
        System.out.println("Can't access database.");  }
    }
    
    catch (IOException e)
    {
      System.err.println("Error: " + e.getMessage());
    }
    
  }


  public void taxCalculator ()
 {
     Scanner in = new Scanner(System.in);
     System.out.println("Please select your state: 1. PA 2. NJ 3. NY");
     int state = in.nextInt();
     if (state == 1 ){
       tax = 1.06;
     }
     else if (state == 2)
     {
       tax = 1.07;
     }
     else if (state == 3)
     {
       tax = 1.04;
     }             
     else
       System.out.println("State is invalid.");
 
 }

}
